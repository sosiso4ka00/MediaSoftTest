import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

const initialState = {
  products: null,
  status: 'idle', // idle pending load
  sort: 'price', // rating price 
  desc: false,
  selectCategory: null,
  allCategories: null
};


export const fetchProducts = createAsyncThunk(
  'shop/products',
  async (action, { getState }) => {
    let response
    if (!getState().shop.selectCategory)
      response = await fetch(`${process.env.REACT_APP_URL}/products?sort=${getState().shop.desc ? 'desc' : 'asc'}&field=${getState().shop.sort}`)
    else
      response = await fetch(`${process.env.REACT_APP_URL}/products/category/${getState().shop.selectCategory}?sort=${getState().shop.desc ? 'desc' : 'asc'}&field=${getState().shop.sort}`)
    return response.json()
  }
)

export const fetchCategories = createAsyncThunk(
  'shop/categories',
  async (action, { getState }) => {
    let response = await fetch(`${process.env.REACT_APP_URL}/products/categories`)
    return response.json()
  }
)

export const shopSlice = createSlice({
  name: 'shop',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    changeSort(state, { payload }) {
      state.sort = payload.sort
      state.desc = payload.desc
    },
    changeCategory(state, { payload }) {
      state.selectCategory = payload === 0 ? null : payload
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers(builder) {
    builder
      .addCase(fetchProducts.pending, (state, action) => {
        state.products = action.payload
        state.status = 'pending'
      })
      .addCase(fetchProducts.fulfilled, (state, action) => {
        state.products = action.payload
        state.status = 'load'
      })
      .addCase(fetchCategories.fulfilled, (state, action) => {
        state.allCategories = action.payload
      })
  },

});

export const { changeSort, changeCategory } = shopSlice.actions;


export default shopSlice.reducer;
